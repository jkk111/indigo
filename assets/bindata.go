// Code generated by go-bindata.
// sources:
// resources/ConnectionRefused.html
// resources/ServiceUnavailable.html
// resources/admin/index.html
// resources/setup.sql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesConnectionrefusedHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func resourcesConnectionrefusedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesConnectionrefusedHtml,
		"resources/ConnectionRefused.html",
	)
}

func resourcesConnectionrefusedHtml() (*asset, error) {
	bytes, err := resourcesConnectionrefusedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/ConnectionRefused.html", size: 0, mode: os.FileMode(438), modTime: time.Unix(1528313197, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesServiceunavailableHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xe5\xb2\x81\xd3\xa9\x89\x29\x76\xbc\x5c\x0a\x0a\x36\x25\x99\x25\x39\xa9\x76\xc1\xa9\x45\x65\x99\xc9\xa9\x0a\xa1\x79\x89\x65\x89\x99\x39\x89\x49\x39\xa9\x36\xfa\x10\x29\x5e\x2e\x1b\x7d\xa8\x72\x9b\xa4\xfc\x94\x4a\x88\xb6\x0c\x43\xbb\x90\x8c\x54\x05\x98\x3e\xcf\x62\x05\xe7\xd2\xa2\xa2\xd4\xbc\x92\x9c\x4a\x54\x43\x32\x0c\xc1\x26\x40\x75\xda\xe8\x83\x5d\x00\x08\x00\x00\xff\xff\x89\xac\xb1\x55\x99\x00\x00\x00")

func resourcesServiceunavailableHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesServiceunavailableHtml,
		"resources/ServiceUnavailable.html",
	)
}

func resourcesServiceunavailableHtml() (*asset, error) {
	bytes, err := resourcesServiceunavailableHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/ServiceUnavailable.html", size: 153, mode: os.FileMode(438), modTime: time.Unix(1528313350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesAdminIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xe5\xb2\x81\xd3\xa9\x89\x29\x76\xbc\x5c\x0a\x0a\x36\x25\x99\x25\x39\xa9\x76\x36\xfa\x10\x9a\x97\xcb\x46\x1f\x2a\x67\x93\x94\x9f\x52\x09\x51\x93\x92\x59\x66\xe7\x91\x9a\x93\x93\xaf\x10\x9e\x5f\x94\x93\x62\xa3\x0f\x12\x80\xcb\x38\xe6\xe4\x28\x04\xa7\x16\x95\x65\x26\xa7\x16\xa3\x49\x05\x95\xe6\xe5\x65\xe6\xa5\x63\x91\xf6\x48\xcd\xcc\x01\x59\x06\xb5\xc4\x46\x1f\xec\x32\x40\x00\x00\x00\xff\xff\x4a\x83\x7c\xe1\xb1\x00\x00\x00")

func resourcesAdminIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAdminIndexHtml,
		"resources/admin/index.html",
	)
}

func resourcesAdminIndexHtml() (*asset, error) {
	bytes, err := resourcesAdminIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/admin/index.html", size: 177, mode: os.FileMode(438), modTime: time.Unix(1528379313, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesSetupSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x3f\x4f\xc3\x30\x10\xc5\xf7\x48\xf9\x0e\xa7\x2e\x6d\xa5\x2e\xcc\x4c\x69\x7b\x45\x16\xa9\x03\x89\x23\xb5\x42\x0c\x26\x39\xa8\xa5\xc4\x8e\x6c\xd3\xcf\x8f\xe2\x66\x80\xfe\x21\xb0\xbe\xfb\xdd\xbb\x27\xdd\x5b\xe5\x98\x08\x04\x91\x2c\x53\x04\xb6\x01\x9e\x09\xc0\x1d\x2b\x44\x01\x8e\xec\x51\x55\xe4\x60\x16\x47\x00\xaa\x06\xc6\x05\x3e\x60\x0e\x4f\x39\xdb\x26\xf9\x1e\x1e\x71\x0f\x49\x29\x32\xc6\x57\x39\x6e\x91\x8b\x45\x0f\x6a\xd9\x12\x08\xdc\x89\xe0\xc5\xcb\x34\x0d\x72\x4d\xae\xfa\x29\xc3\x1a\x37\x49\x99\x0a\x98\x50\x75\x30\x30\xe5\x06\xd6\xe4\x2a\xab\x3a\xaf\x8c\x86\xa2\xa3\x4a\xbd\x2b\xaa\xa7\x93\x60\x70\x30\xce\x9f\xf9\x42\xaf\x77\xd2\x1f\xae\xe9\x96\x3a\x33\x7a\x30\xef\xa1\xf3\x4b\xce\x4b\xeb\x47\x57\x8b\x40\xad\x4c\xdb\x4a\x5d\x5f\x78\x48\xfb\xe1\x6e\x59\xbc\xbc\x9e\x18\xd2\xc7\x31\x44\x69\xe7\x65\xd3\x8c\x86\x61\x03\x77\x2b\xce\xe0\x93\xfc\x21\xd5\x80\xe2\x78\x38\xd2\xf2\xad\xa1\x1a\x96\x59\x96\x5e\x62\x77\x81\x29\x39\x7b\x2e\x71\xd6\x3f\x6f\x11\x5e\x35\xff\xa6\xf6\x55\x99\xc7\xd1\xfc\x3e\x8e\xe2\xe8\x97\x26\xca\xba\x55\xfa\xbf\x3d\xfc\x74\x64\xaf\xf4\xd0\x91\x55\xb2\xb9\x32\x18\x32\x9d\xe6\x21\xd5\x57\x00\x00\x00\xff\xff\x7e\x33\x0e\x22\x1c\x03\x00\x00")

func resourcesSetupSqlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesSetupSql,
		"resources/setup.sql",
	)
}

func resourcesSetupSql() (*asset, error) {
	bytes, err := resourcesSetupSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/setup.sql", size: 796, mode: os.FileMode(438), modTime: time.Unix(1528707890, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/ConnectionRefused.html": resourcesConnectionrefusedHtml,
	"resources/ServiceUnavailable.html": resourcesServiceunavailableHtml,
	"resources/admin/index.html": resourcesAdminIndexHtml,
	"resources/setup.sql": resourcesSetupSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"ConnectionRefused.html": &bintree{resourcesConnectionrefusedHtml, map[string]*bintree{}},
		"ServiceUnavailable.html": &bintree{resourcesServiceunavailableHtml, map[string]*bintree{}},
		"admin": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{resourcesAdminIndexHtml, map[string]*bintree{}},
		}},
		"setup.sql": &bintree{resourcesSetupSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

