// Code generated by go-bindata.
// sources:
// resources/ConnectionRefused.html
// resources/ServiceUnavailable.html
// resources/add_service.sql
// resources/admin/index.html
// resources/setup.sql
// resources/update_service.sql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesConnectionrefusedHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func resourcesConnectionrefusedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesConnectionrefusedHtml,
		"resources/ConnectionRefused.html",
	)
}

func resourcesConnectionrefusedHtml() (*asset, error) {
	bytes, err := resourcesConnectionrefusedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/ConnectionRefused.html", size: 0, mode: os.FileMode(438), modTime: time.Unix(1528313197, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesServiceunavailableHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xe5\xb2\x81\xd3\xa9\x89\x29\x76\xbc\x5c\x0a\x0a\x36\x25\x99\x25\x39\xa9\x76\xc1\xa9\x45\x65\x99\xc9\xa9\x0a\xa1\x79\x89\x65\x89\x99\x39\x89\x49\x39\xa9\x36\xfa\x10\x29\x5e\x2e\x1b\x7d\xa8\x72\x9b\xa4\xfc\x94\x4a\x88\xb6\x0c\x43\xbb\x90\x8c\x54\x05\x98\x3e\xcf\x62\x05\xe7\xd2\xa2\xa2\xd4\xbc\x92\x9c\x4a\x54\x43\x32\x0c\xc1\x26\x40\x75\xda\xe8\x83\x5d\x00\x08\x00\x00\xff\xff\x89\xac\xb1\x55\x99\x00\x00\x00")

func resourcesServiceunavailableHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesServiceunavailableHtml,
		"resources/ServiceUnavailable.html",
	)
}

func resourcesServiceunavailableHtml() (*asset, error) {
	bytes, err := resourcesServiceunavailableHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/ServiceUnavailable.html", size: 153, mode: os.FileMode(438), modTime: time.Unix(1528313350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesAdd_serviceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\xb1\x8a\x83\x40\x10\xc6\xf1\x5e\xf0\x1d\xbe\xf2\x0e\xe6\x09\xa6\xb3\xb0\x10\x0e\x0f\x4e\x2f\xfd\xa8\x43\x56\x30\xab\xec\x2c\x3e\x7f\xd8\x6c\xa2\x21\xdd\x0c\xff\xaf\xf8\x35\x6d\x57\xff\xf5\x68\xda\xfe\x17\xa6\x61\x9f\x47\x35\x7c\x95\x05\xe0\xe5\xa6\x84\x49\x6d\x24\xb8\xd5\x22\x61\x93\xe8\x08\xa9\x05\xdd\x56\xc2\x10\xc4\x8f\x8e\xe0\xc4\x1c\xc1\xa2\x84\x48\xa9\x4a\xb8\x1a\x41\xfd\x4e\x98\xbd\x45\x59\x96\xe3\xa8\x52\x4a\x9b\xe7\x5f\xa7\x91\x7a\x19\x16\x9d\xca\xe2\x1b\x97\xea\xe7\xbf\xee\x32\x80\xb3\x80\x33\x81\xb3\x81\x4f\x04\x67\x05\xbf\x18\x9c\x1d\x7c\x42\x38\x4b\xf8\x41\xe1\xc3\xc2\x9f\x18\x7e\xd7\xf0\xc9\xb9\x07\x00\x00\xff\xff\xb1\xbe\xfb\x96\x1d\x01\x00\x00")

func resourcesAdd_serviceSqlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAdd_serviceSql,
		"resources/add_service.sql",
	)
}

func resourcesAdd_serviceSql() (*asset, error) {
	bytes, err := resourcesAdd_serviceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/add_service.sql", size: 285, mode: os.FileMode(438), modTime: time.Unix(1528800517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesAdminIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xe5\xb2\x81\xd3\xa9\x89\x29\x76\xbc\x5c\x0a\x0a\x36\x25\x99\x25\x39\xa9\x76\x36\xfa\x10\x9a\x97\xcb\x46\x1f\x2a\x67\x93\x94\x9f\x52\x09\x51\x93\x92\x59\x66\xe7\x91\x9a\x93\x93\xaf\x10\x9e\x5f\x94\x93\x62\xa3\x0f\x12\x80\xcb\x38\xe6\xe4\x28\x04\xa7\x16\x95\x65\x26\xa7\x16\xa3\x49\x05\x95\xe6\xe5\x65\xe6\xa5\x63\x91\xf6\x48\xcd\xcc\x01\x59\x06\xb5\xc4\x46\x1f\xec\x32\x40\x00\x00\x00\xff\xff\x4a\x83\x7c\xe1\xb1\x00\x00\x00")

func resourcesAdminIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAdminIndexHtml,
		"resources/admin/index.html",
	)
}

func resourcesAdminIndexHtml() (*asset, error) {
	bytes, err := resourcesAdminIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/admin/index.html", size: 177, mode: os.FileMode(438), modTime: time.Unix(1528379313, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesSetupSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4f\x6b\xea\x40\x14\xc5\xf7\x81\x7c\x87\x4b\x36\x1a\xf0\x3d\x78\xeb\xb7\x8a\xf6\x5a\x42\xe3\xa4\x8d\x13\x50\x44\x70\x4c\x6e\x75\x20\x99\x91\x99\xd4\xcf\x5f\x32\xc9\xa2\x7f\x12\xa5\xdd\x9e\xfb\x9b\x73\x0e\xcc\x59\x64\x18\x71\x04\x1e\xcd\x13\x84\x78\x09\x2c\xe5\x80\x9b\x78\xcd\xd7\x60\xc9\x5c\x65\x41\x16\xa6\xbe\x07\x20\x4b\x88\x19\xc7\x47\xcc\xe0\x39\x8b\x57\x51\xb6\x85\x27\xdc\x42\x94\xf3\x34\x66\x8b\x0c\x57\xc8\xf8\xac\x05\x95\xa8\x09\x38\x6e\xb8\xf3\x62\x79\x92\x38\xb9\x24\x5b\x7c\x96\xe1\x01\x97\x51\x9e\x70\x08\x02\x47\x9c\xb5\x6d\xbe\x3c\x84\x56\xbf\x88\xe6\x3c\xa4\x1b\xba\xe8\xdb\x8e\x47\x23\x54\x71\x1e\x63\x6a\x61\x1b\x32\x7d\xb6\xb0\xa3\x5c\x47\xd8\x46\x98\x66\x0c\x51\xba\xa4\x0e\x13\xe6\x64\x47\xa8\xc3\x0e\x82\x3f\x14\xcc\x20\x28\xb4\xb2\xba\xa2\xbf\x95\x3e\x4d\x27\x4c\xc3\x42\xd7\xb5\x50\x25\xac\x2f\x54\xc8\x57\x49\xe5\x24\x0c\x60\x7f\x70\x86\xa4\xae\x63\xa9\xbb\x7d\x97\x29\x95\x6d\x44\x55\xdd\x2f\xd7\x83\xd1\x6f\x3a\xc6\x7d\xc8\x50\xc7\xde\x17\xef\x57\x25\x25\x8e\x15\x95\x30\x4f\xd3\x04\x23\xf6\x9d\xfc\xe7\xb0\x9c\xc5\x2f\x39\x4e\xdb\x45\xcc\xdc\xff\x87\x1f\xd4\x76\x60\xa1\xef\x85\xff\x7d\xcf\xf7\x6e\xec\x57\x94\xb5\x54\x3f\x5d\xef\x9b\x25\x33\xb0\x5e\x4b\x46\x8a\x6a\xe0\xd0\x77\xea\xee\xae\xd5\x7b\x00\x00\x00\xff\xff\x60\xe6\x34\xb0\x52\x03\x00\x00")

func resourcesSetupSqlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesSetupSql,
		"resources/setup.sql",
	)
}

func resourcesSetupSql() (*asset, error) {
	bytes, err := resourcesSetupSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/setup.sql", size: 850, mode: os.FileMode(438), modTime: time.Unix(1528832497, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesUpdate_serviceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8c\xc1\x8a\x83\x40\x10\x44\xef\x82\xff\x50\x1f\xd0\x5f\xb0\xb0\x07\x61\x07\xf6\xb8\x6c\x0c\x39\xb7\xda\xc4\x01\x33\xca\xf4\xe0\xf7\x87\x1a\x25\xc9\xe9\xd5\x2b\xba\xeb\xfa\xf7\xd3\xf5\x01\x6e\x79\x8f\xa3\x39\x2e\xa1\x6f\x1b\x20\xe9\xc3\xf0\x8d\x2f\x52\x30\x99\x8f\x34\x52\x30\xaf\x5e\x68\xa4\x60\xd3\x32\xd3\x48\x01\x7f\xb3\x6d\x2b\x1b\x52\x30\x64\x4d\x63\xbd\x38\x92\x60\x56\xaf\x4e\x0a\xbc\x68\xae\x73\x35\x08\x07\x34\xdf\x9d\x0d\x29\xb0\xb4\x53\x2c\xed\x82\x98\xbc\xe8\xb2\xd0\xcf\xf8\xea\xba\xf3\xe9\x43\xeb\xd8\xe9\xe1\x58\x79\x1b\x87\x75\x58\x6c\x3a\xc6\x6b\x6c\x9b\xdb\x6f\xf8\x0f\x88\xb5\x8c\xd3\x33\x00\x00\xff\xff\xe6\x04\x2f\x63\x1d\x01\x00\x00")

func resourcesUpdate_serviceSqlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesUpdate_serviceSql,
		"resources/update_service.sql",
	)
}

func resourcesUpdate_serviceSql() (*asset, error) {
	bytes, err := resourcesUpdate_serviceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/update_service.sql", size: 285, mode: os.FileMode(438), modTime: time.Unix(1528828848, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/ConnectionRefused.html": resourcesConnectionrefusedHtml,
	"resources/ServiceUnavailable.html": resourcesServiceunavailableHtml,
	"resources/add_service.sql": resourcesAdd_serviceSql,
	"resources/admin/index.html": resourcesAdminIndexHtml,
	"resources/setup.sql": resourcesSetupSql,
	"resources/update_service.sql": resourcesUpdate_serviceSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"ConnectionRefused.html": &bintree{resourcesConnectionrefusedHtml, map[string]*bintree{}},
		"ServiceUnavailable.html": &bintree{resourcesServiceunavailableHtml, map[string]*bintree{}},
		"add_service.sql": &bintree{resourcesAdd_serviceSql, map[string]*bintree{}},
		"admin": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{resourcesAdminIndexHtml, map[string]*bintree{}},
		}},
		"setup.sql": &bintree{resourcesSetupSql, map[string]*bintree{}},
		"update_service.sql": &bintree{resourcesUpdate_serviceSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

