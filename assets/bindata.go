// Code generated by go-bindata. DO NOT EDIT.
// sources:
// resources/ConnectionRefused.html
// resources/ServiceUnavailable.html
// resources/admin/index.html
// resources/setup.sql
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesConnectionrefusedHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func resourcesConnectionrefusedHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesConnectionrefusedHtml,
		"resources/ConnectionRefused.html",
	)
}

func resourcesConnectionrefusedHtml() (*asset, error) {
	bytes, err := resourcesConnectionrefusedHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/ConnectionRefused.html", size: 0, mode: os.FileMode(436), modTime: time.Unix(1528396449, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesServiceunavailableHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x51\xa9\x89\x29\x76\x5c\x0a\x0a\x36\x25\x99\x25\x39\xa9\x76\xc1\xa9\x45\x65\x99\xc9\xa9\x0a\xa1\x79\x89\x65\x89\x99\x39\x89\x49\x39\xa9\x36\xfa\x10\x29\x2e\x1b\x7d\x88\x62\x9b\xa4\xfc\x94\x4a\xb0\x9e\x0c\x43\xbb\x90\x8c\x54\x05\x98\x26\xcf\x62\x05\xe7\xd2\xa2\xa2\xd4\xbc\x92\x9c\x4a\x54\x13\x32\x0c\x41\xda\x21\xfa\x6c\xf4\xc1\x56\x03\x02\x00\x00\xff\xff\x06\xe7\x2d\xdd\x91\x00\x00\x00")

func resourcesServiceunavailableHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesServiceunavailableHtml,
		"resources/ServiceUnavailable.html",
	)
}

func resourcesServiceunavailableHtml() (*asset, error) {
	bytes, err := resourcesServiceunavailableHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/ServiceUnavailable.html", size: 145, mode: os.FileMode(436), modTime: time.Unix(1528396449, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesAdminIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x51\xa9\x89\x29\x76\x5c\x0a\x0a\x36\x25\x99\x25\x39\xa9\x76\x36\xfa\x10\x9a\xcb\x46\x1f\x22\x63\x93\x94\x9f\x52\x09\x56\x90\x92\x59\x66\xe7\x91\x9a\x93\x93\xaf\x10\x9e\x5f\x94\x93\x62\xa3\x0f\x12\x80\x49\x38\xe6\xe4\x28\x04\xa7\x16\x95\x65\x26\xa7\x16\xa3\xca\x04\x95\xe6\xe5\x65\xe6\xa5\x63\xca\x7a\xa4\x66\xe6\x70\xd9\xe8\x43\xcc\xb7\xd1\x07\xbb\x07\x10\x00\x00\xff\xff\x91\xb6\xae\xc6\xa6\x00\x00\x00")

func resourcesAdminIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAdminIndexHtml,
		"resources/admin/index.html",
	)
}

func resourcesAdminIndexHtml() (*asset, error) {
	bytes, err := resourcesAdminIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/admin/index.html", size: 166, mode: os.FileMode(436), modTime: time.Unix(1528396449, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesSetupSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x41\x6b\x02\x31\x14\x84\xef\xf9\x15\x83\x27\x17\xbc\xf4\xdc\x53\xb4\xcf\x12\x1a\xb3\x6d\x7c\x01\x3d\xa6\xe6\x81\x01\x5d\x25\xb1\xfd\xfd\x25\xb6\x50\xda\x2d\x42\xaf\x5f\x26\x33\xf3\x66\xe1\x49\x33\x81\xf5\xdc\x12\xcc\x12\xae\x67\xd0\xc6\xac\x79\x8d\x2a\xe5\x3d\xef\xa4\x62\xaa\x80\x9c\x60\x1c\xd3\x23\x79\x3c\x7b\xb3\xd2\x7e\x8b\x27\xda\x42\x07\xee\x8d\x5b\x78\x5a\x91\xe3\x99\x02\x86\x78\x14\x30\x6d\xf8\xea\xe4\x82\xb5\x8d\x26\xa9\xbb\x9f\x14\x0f\xb4\xd4\xc1\x32\x26\x93\x26\xd8\x9f\xea\xe5\xd7\x37\x28\xe0\x1c\x2f\xfb\x3f\x70\x91\xf3\xe9\xa6\x9d\x0c\xf1\xf5\x20\x09\xf3\xbe\xb7\x63\xcd\x5d\x93\x04\x67\x5e\x02\x4d\x5b\xf0\xec\x9a\xd3\x7d\xc3\x76\x44\xa7\xba\x7b\xa5\x6e\xcc\x13\xd3\x31\x0f\xff\x1b\xe7\xad\x4a\x19\x8f\x53\xa5\xe4\x78\x18\xf3\xaf\x32\x9f\xcf\xad\xce\x47\x00\x00\x00\xff\xff\x0d\xc5\x13\x41\xac\x01\x00\x00")

func resourcesSetupSqlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesSetupSql,
		"resources/setup.sql",
	)
}

func resourcesSetupSql() (*asset, error) {
	bytes, err := resourcesSetupSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/setup.sql", size: 428, mode: os.FileMode(436), modTime: time.Unix(1528396449, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/ConnectionRefused.html": resourcesConnectionrefusedHtml,
	"resources/ServiceUnavailable.html": resourcesServiceunavailableHtml,
	"resources/admin/index.html": resourcesAdminIndexHtml,
	"resources/setup.sql": resourcesSetupSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"ConnectionRefused.html": &bintree{resourcesConnectionrefusedHtml, map[string]*bintree{}},
		"ServiceUnavailable.html": &bintree{resourcesServiceunavailableHtml, map[string]*bintree{}},
		"admin": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{resourcesAdminIndexHtml, map[string]*bintree{}},
		}},
		"setup.sql": &bintree{resourcesSetupSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

