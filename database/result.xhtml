
<!DOCTYPE html>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
		<style>
			body {
				background: black;
				color: rgb(80, 80, 80);
			}
			body, pre, #legend span {
				font-family: Menlo, monospace;
				font-weight: bold;
			}
			#topbar {
				background: black;
				position: fixed;
				top: 0; left: 0; right: 0;
				height: 42px;
				border-bottom: 1px solid rgb(80, 80, 80);
			}
			#content {
				margin-top: 50px;
			}
			#nav, #legend {
				float: left;
				margin-left: 10px;
			}
			#legend {
				margin-top: 12px;
			}
			#nav {
				margin-top: 10px;
			}
			#legend span {
				margin: 0 5px;
			}
			.cov0 { color: rgb(192, 0, 0) }
.cov1 { color: rgb(128, 128, 128) }
.cov2 { color: rgb(116, 140, 131) }
.cov3 { color: rgb(104, 152, 134) }
.cov4 { color: rgb(92, 164, 137) }
.cov5 { color: rgb(80, 176, 140) }
.cov6 { color: rgb(68, 188, 143) }
.cov7 { color: rgb(56, 200, 146) }
.cov8 { color: rgb(44, 212, 149) }
.cov9 { color: rgb(32, 224, 152) }
.cov10 { color: rgb(20, 236, 155) }

		</style>
	</head>
	<body>
		<div id="topbar">
			<div id="nav">
				<select id="files">
				
				<option value="file0">github.com\jkk111\indigo\database\index.go (80.9%)</option>
				
				</select>
			</div>
			<div id="legend">
				<span>not tracked</span>
			
				<span class="cov0">not covered</span>
				<span class="cov8">covered</span>
			
			</div>
		</div>
		<div id="content">
		
		<pre class="file" id="file0" style="display: none">package database

import (
  "fmt"
  "database/sql"
  "encoding/json"
  "github.com/jmoiron/sqlx"
  "github.com/mattn/go-sqlite3"
  "github.com/jkk111/indigo/assets"
  "github.com/jkk111/indigo/util"
)

var Instance * sqlx.DB

type Service struct {
  Id int `json:"id" db:"id"`
  Name string `json:"name" db:"name"`
  Desc string `json:"desc" db:"desc"`
  Host string `json:"host" db:"host"`
  Path string `json:"path" db:"path"`
  Repo string `json:"repo" db:"repo"`
  Branch string `json:"branch" db:"branch"`
  LatestHash string `json:"hash" db:"hash"`

  Start string `json:"start" db:"start"`

  StartArgsRaw string `json:"-" db:"args"`
  Args []string `json:"args" db:"-"`
  StartEnvRaw string `json:"-" db:"env"`
  Env []string `json:"env" db:"-"`

  Install string `json:"install" db:"install"`

  InstallArgsRaw string `json:"-" db:"installArgs"`
  InstallArgs []string `json:"installArgs" db:"-"`
  InstallEnvRaw string `json:"-" db:"installEnv"`
  InstallEnv []string `json:"installEnv" db:"-"`

  Enabled bool `json:"enabled" db:"enabled"`
}

func Exec(db * sqlx.DB, q string) (sql.Result, error) <span class="cov8" title="1">{
  return db.Exec(q)
}</span>

func MustExec(db * sqlx.DB, q string) <span class="cov8" title="1">{
  _, err := Exec(db, q)
  if err != nil </span><span class="cov0" title="0">{
    panic(err)</span>
  }
}

func Query(db * sqlx.DB, q string) (* sqlx.Rows, error) <span class="cov8" title="1">{
  return db.Queryx(q)
}</span>

func MustQuery(db * sqlx.DB, q string) * sqlx.Rows <span class="cov8" title="1">{
  rows, err := Query(db, q)

  if err != nil </span><span class="cov0" title="0">{
    panic(err)</span>
  }

  <span class="cov8" title="1">return rows</span>
}

func AddService(service * Service) <span class="cov0" title="0">{
  sql := string(assets.MustAsset("resources/add_service.sql"))
  fmt.Println(Instance.NamedExec(sql, service))
}</span>

func UpdateService(service * Service) <span class="cov0" title="0">{
  sql := string(assets.MustAsset("resources/update_service.sql"))
  fmt.Println(Instance.NamedExec(sql, service))
}</span>

func Must(err error) <span class="cov8" title="1">{
  if err != nil </span><span class="cov0" title="0">{
    panic(err)</span>
  }
}

func Services() []*Service <span class="cov8" title="1">{
  services := make([]*Service, 0)
  rows := MustQuery(Instance, "SELECT * FROM services")

  for rows.Next() </span><span class="cov8" title="1">{
    svc := &amp;Service{}

    err := rows.StructScan(
      svc,
    )

    if err != nil </span><span class="cov0" title="0">{
      panic(err)</span>
    }

    <span class="cov8" title="1">Must(json.Unmarshal([]byte(svc.StartArgsRaw), &amp;svc.Args))
    Must(json.Unmarshal([]byte(svc.StartEnvRaw), &amp;svc.Env))
    Must(json.Unmarshal([]byte(svc.InstallArgsRaw), &amp;svc.InstallArgs))
    Must(json.Unmarshal([]byte(svc.InstallEnvRaw), &amp;svc.InstallEnv))

    services = append(services, svc)</span>
  }

  <span class="cov8" title="1">rows.Close()

  return services</span>
}

func Setup() <span class="cov8" title="1">{
  fmt.Println("Initializing Database")

  if Instance != nil </span><span class="cov8" title="1">{
    fmt.Println("Database Already Connected, Closing")
    Instance.Close()
  }</span>

  <span class="cov8" title="1">db_path := util.Path("store.db")
 
  _ = sqlite3.SQLiteDriver{}

  db, err := sqlx.Connect("sqlite3", db_path)
  table_setup_queries := string(assets.MustAsset("resources/setup.sql"))

  if err != nil </span><span class="cov0" title="0">{
    fmt.Println(err)
  }</span> else<span class="cov8" title="1"> {
    MustExec(db, table_setup_queries)
    fmt.Println(Exec(db, "INSERT INTO services(name, host, path) VALUES('static', '*', '/')"))
    Exec(db, "INSERT INTO services(name, host, path) VALUES('conversion', '*', '/conv')")
    Exec(db, "INSERT INTO services(name, host, path, enabled) VALUES('old_service', '*', '/old', 0)")
    db = db
  }</span>

  <span class="cov8" title="1">Instance = db
  fmt.Println("Database Ready")</span>
}

func init() <span class="cov8" title="1">{
  Setup()
}</pre>
		
		</div>
	</body>
	<script>
	(function() {
		var files = document.getElementById('files');
		var visible;
		files.addEventListener('change', onChange, false);
		function select(part) {
			if (visible)
				visible.style.display = 'none';
			visible = document.getElementById(part);
			if (!visible)
				return;
			files.value = part;
			visible.style.display = 'block';
			location.hash = part;
		}
		function onChange() {
			select(files.value);
			window.scrollTo(0, 0);
		}
		if (location.hash != "") {
			select(location.hash.substr(1));
		}
		if (!visible) {
			select("file0");
		}
	})();
	</script>
</html>
